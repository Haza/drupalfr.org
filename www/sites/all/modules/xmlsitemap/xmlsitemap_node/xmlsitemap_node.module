<?php
// $Id: xmlsitemap_node.module,v 1.19.2.20.2.93 2010/02/15 21:39:16 davereid Exp $

/**
 * Implements hook_xmlsitemap_link_info().
 */
function xmlsitemap_node_xmlsitemap_link_info() {
  $types['node'] = array(
    'label' => t('Content'),
    'bundle label' => t('Content type'),
    'base table' => 'node',
    'object keys' => array(
      'id' => 'nid',
      'bundle' => 'type',
    ),
    'path callback' => 'xmlsitemap_node_path',
    'load hook' => 'node_load',
    'xmlsitemap' => array(
      'process callback' => 'xmlsitemap_node_xmlsitemap_process_node_links',
    ),
  );
  foreach (node_get_types('names') as $type => $name) {
    $types['node']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'real path' => 'admin/content/types/' . str_replace('_', '-', $type),
        'access arguments' => array('administer content types'),
      ),
    );
  }
  return $types;
}

/**
 * @todo Replace with node_path in Drupal 7.
 */
function xmlsitemap_node_path($node) {
  return 'node/' . $node->nid;
}

/**
 * Implements hook_cron().
 *
 * Process old nodes not found in the {xmlsitemap} table.
 */
function xmlsitemap_node_cron() {
  xmlsitemap_node_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function xmlsitemap_node_xmlsitemap_index_links($limit) {
  if ($types = xmlsitemap_get_link_type_enabled_bundles('node')) {
    $query = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {xmlsitemap} x ON x.type = 'node' AND n.nid = x.id WHERE x.id IS NULL AND n.type IN (" . db_placeholders($types, 'varchar') . ") ORDER BY n.nid DESC", $types, 0, $limit);
    $nids = array();
    while ($nid = db_result($query)) {
      $nids[] = $nid;
    }
    xmlsitemap_node_xmlsitemap_process_node_links($nids);
  }
}

/**
 * Process node sitemap links.
 *
 * @param $nids
 *   An array of node IDs.
 */
function xmlsitemap_node_xmlsitemap_process_node_links(array $nids) {
  foreach ($nids as $nid) {
    if ($node = node_load($nid, NULL, TRUE)) {
      $link = xmlsitemap_node_create_link($node);
      xmlsitemap_save_link($link);
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      $link = xmlsitemap_node_create_link($node);
      xmlsitemap_save_link($link);
      break;
    case 'delete':
      xmlsitemap_link_delete('node', $node->nid);
      break;
  }
}

/**
 * Implements hook_comment().
 */
function xmlsitemap_node_comment($comment, $op) {
  switch ($op) {
    case 'update':
    case 'publish':
    case 'unpublish':
    case 'delete':
      $comment = (object) $comment;
      if ($node = node_load($comment->nid, NULL, TRUE)) {
        $link = xmlsitemap_node_create_link($node);
        xmlsitemap_save_link($link);
      }
      break;
  }
}

/**
 * Implements hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'update') {
    // Cannot perform xmlsitemap_link_bundle_settings_save() here since
    // node_type_form_submit() strips all non-essential data from $info.
    if (!empty($info->old_type) && $info->old_type != $info->type) {
      xmlsitemap_link_bundle_rename('node', $info->old_type, $info->type);
    }
  }
  if ($op == 'delete') {
    xmlsitemap_link_bundle_delete('node', $info->type);
  }
}

/**
 * Implements hook_content_extra_fields().
 *
 * This is so that the XML sitemap fieldset is sortable on the node edit form.
 */
function xmlsitemap_node_content_extra_fields() {
  $extras['xmlsitemap'] = array(
    'label' => t('XML sitemap'),
    'description' => t('XML sitemap module form'),
    'weight' => 30,
  );
  return $extras;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see node_type_form()
 * @see xmlsitemap_add_link_bundle_settings()
 */
function xmlsitemap_node_form_node_type_form_alter(&$form, $form_state) {
  $node_type = isset($form['#node_type']->type) ? $form['#node_type']->type : '';

  module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
  xmlsitemap_add_link_bundle_settings($form, $form_state, 'node', $node_type);

  // Add our submit handler before node_type_form_submit() so we can compare
  // the old and new values.
  array_unshift($form['#submit'], 'xmlsitemap_node_type_form_submit');
}

function xmlsitemap_node_type_form_submit($form, &$form_state) {
  $node_type = $form_state['values']['old_type'];
  xmlsitemap_link_bundle_settings_save('node', $node_type, $form_state['values']['xmlsitemap']);

  // Do not allow node_type_form_submit() to run variable_set() on this.
  unset($form_state['values']['xmlsitemap']);
}

/**
 * Implements hook_form_alter().
 *
 * Add the XML sitemap individual link options for a node.
 *
 * @see xmlsitemap_add_form_link_options()
 */
function xmlsitemap_node_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    // Add the link options.
    module_load_include('inc', 'xmlsitemap', 'xmlsitemap.admin');
    xmlsitemap_add_form_link_options($form, 'node', $form['type']['#value'], $form['nid']['#value']);
    $form['xmlsitemap']['#access'] |= user_access('administer nodes');
    $form['xmlsitemap']['#weight'] = 30;
  }
}

/**
 * Fetch all the timestamps for when a node was changed.
 *
 * @param $node
 *   A node object.
 * @return
 *   An array of UNIX timestamp integers.
 */
function xmlsitemap_node_get_timestamps($node) {
  static $timestamps = array();

  if (!isset($timestamps[$node->nid])) {
    $timestamps[$node->nid] = array();
    $query = db_query("SELECT c.timestamp FROM {comments} c WHERE c.nid = %d AND c.status = %d UNION ALL SELECT nr.timestamp FROM {node_revisions} nr WHERE nr.nid = %d", $node->nid, COMMENT_PUBLISHED, $node->nid);
    while ($timestamp = db_result($query)) {
      $timestamps[$node->nid][] = (int) $timestamp;
    }
  }

  return $timestamps[$node->nid];
}

/**
 * Create a sitemap link from a node.
 *
 * The link will be saved as $node->xmlsitemap.
 *
 * @param $node
 *   A node object.
 */
function xmlsitemap_node_create_link(stdClass &$node) {
  if (!isset($node->xmlsitemap) || !is_array($node->xmlsitemap)) {
    $node->xmlsitemap = array();
    if ($node->nid && $link = xmlsitemap_link_load('node', $node->nid)) {
      $node->xmlsitemap = $link;
    }
  }

  $settings = xmlsitemap_link_bundle_load('node', $node->type);

  $node->xmlsitemap += array(
    'type' => 'node',
    'id' => $node->nid,
    'subtype' => $node->type,
    'loc' => 'node/'. $node->nid,
    'status' => $settings['status'],
    'status_default' => $settings['status'],
    'status_override' => 0,
    'priority' => $settings['priority'],
    'priority_default' => $settings['priority'],
    'priority_override' => 0,
  );

  // Always recalculate changefreq and changecount.
  $timestamps = xmlsitemap_node_get_timestamps($node);
  $node->xmlsitemap['changefreq'] = $node->nid ? xmlsitemap_calculate_changefreq($timestamps) : 0;
  $node->xmlsitemap['changecount'] = $node->nid ? count($timestamps) - 1 : 0;

  // The following values must always be checked because they are volatile.
  $node->xmlsitemap['lastmod'] = isset($node->changed) ? $node->changed : REQUEST_TIME;
  $node->xmlsitemap['access'] = $node->nid ? (bool) node_access('view', $node, drupal_anonymous_user()) : 1;
  $node->xmlsitemap['language'] = isset($node->language) ? $node->language : '';

  return $node->xmlsitemap;
}
